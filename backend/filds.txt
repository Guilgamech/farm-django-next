// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Role {
    name  String      @id
    users UserRoles[]
}

model UserRoles {
    userId String
    roleId String
    role   Role   @relation(fields: [roleId], references: [name])
    user   User   @relation(fields: [userId], references: [id])

    @@id([userId, roleId])
}

model User {
    id                      String                                    @id @default(uuid())
    username                String                                    @unique
    password                String
    fullName                String?
    mail                    String                                    @unique
    address                 String
    roles                   UserRoles[]
    areaId                  String?
    area                    Area?                                     @relation(fields: [areaId], references: [id])
    flotas                  Flota[]
    animales                Animal[]
    brigadaId               String?
    brigada                 Brigada?                                  @relation(fields: [brigadaId], references: [id])
    tratamientoEnfermedades CultivoEnfermedadTratamientoResponsable[]
    jefeBrigada             Brigada[]                                 @relation(name: "jefeBrigada")
}

model Area {
    id          String    @id @default(uuid())
    codigo      String    @unique
    description String?
    areaTotal   Int
    usuarios    User[]
    flotas      Flota[]
    animales    Animal[]
    cultivos    Cultivo[]
}

model TipoCultivo {
    id           String                  @id @default(uuid())
    nombre       String
    enfermedades TipoCultivoEnfermedad[]
    cultivos     Cultivo[]
}

model TipoCultivoEnfermedad {
    tipoCultivoId String
    enfermedadId  String
    tipoCultivo   TipoCultivo @relation(fields: [tipoCultivoId], references: [id])
    enfermedad    Enfermedad  @relation(fields: [enfermedadId], references: [id])

    @@id([tipoCultivoId, enfermedadId])
}

model Enfermedad {
    id           String                                    @id @default(uuid())
    nombre       String
    categoria    String
    tiposCultivo TipoCultivoEnfermedad[]
    tratamientos EnfermedadTratamiento[]
    cultivos     CultivoEnfermedadTratamientoResponsable[]
}

model EnfermedadTratamiento {
    tratamientoId String
    enfermedadId  String
    tratamiento   Tratamiento @relation(fields: [tratamientoId], references: [id])
    enfermedad    Enfermedad  @relation(fields: [enfermedadId], references: [id])

    @@id([tratamientoId, enfermedadId])
}

model Tratamiento {
    id           String                                    @id @default(uuid())
    nombre       String
    descripcion  String?
    enfermedades EnfermedadTratamiento[]
    cultivos     CultivoEnfermedadTratamientoResponsable[]
}

model Vehiculo {
    id        String  @id @default(uuid())
    modelo    String
    marca     String
    matricula String
    estado    String
    flotaId   String?
    flota     Flota?  @relation(fields: [flotaId], references: [id])
}

model Flota {
    id            String     @id @default(uuid())
    nombre        String     @unique
    responsableId String
    responsable   User       @relation(fields: [responsableId], references: [id])
    areaId        String
    area          Area       @relation(fields: [areaId], references: [id])
    vehiculos     Vehiculo[]
}

model Animal {
    id            String @id @default(uuid())
    codigo        String
    especie       String
    raza          String
    responsableId String
    areaId        String
    responsable   User   @relation(fields: [responsableId], references: [id])
    area          Area   @relation(fields: [areaId], references: [id])
}

model CultivoEnfermedadTratamientoResponsable {
    responsableId String
    cultivoId     String
    tratamientoId String
    enfermedadId  String
    tratamiento   Tratamiento @relation(fields: [tratamientoId], references: [id])
    enfermedad    Enfermedad  @relation(fields: [enfermedadId], references: [id])
    cultivo       Cultivo     @relation(fields: [cultivoId], references: [id])
    responsable   User        @relation(fields: [responsableId], references: [id])
    estado        String //Enfermo Tratandose Sano

    @@id([tratamientoId, enfermedadId, responsableId, cultivoId])
}

model Cultivo {
    id                      String                                    @id @default(uuid())
    nombre                  String
    fechaPlantacion         DateTime?
    fechaRecogida           DateTime?
    tipoCultivoId           String
    areaId                  String
    area                    Area                                      @relation(fields: [areaId], references: [id])
    tipoCultivo             TipoCultivo                               @relation(fields: [tipoCultivoId], references: [id])
    tratamientoEnfermedades CultivoEnfermedadTratamientoResponsable[]
    incidencias             Incidencia[]
    brigadas                Brigada[]
}

model Incidencia {
    id        String   @id @default(uuid())
    nombre    String
    fecha     DateTime @default(now())
    estado    String // Leve Grave Severo
    cultivoId String
    cultivo   Cultivo  @relation(fields: [cultivoId], references: [id])
}

model Brigada {
    id           String  @id @default(uuid())
    nombre       String  @unique
    jefeId       String
    jefe         User    @relation(fields: [jefeId], references: [id], name: "jefeBrigada")
    trabajadores User[]
    cultivoId    String
    cultivo      Cultivo @relation(fields: [cultivoId], references: [id])
}

